-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [symcrust]: external functions.
-- This is a template file: rename it to "FunsExternal.lean" and fill the holes.
import Aeneas
import Symcrust.Code.Types
open Aeneas.Std
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace Symcrust

/- [symcrust::ntt::slice_to_sub_array] -/
def ntt.slice_to_sub_array (N : Usize) (s : Slice U8) (i : Usize) : Result (Array U8 N) := sorry

/- [symcrust::common::SymCryptRandom] -/
def common.SymCryptRandom : MutRawPtr U8 → Usize → Result Unit := sorry

/- [symcrust::common::SymCryptModuleInit] -/
def common.SymCryptModuleInit : U32 → U32 → Result Unit := sorry

/- [symcrust::common::random] -/
def common.random : Slice U8 → Result (common.Error × (Slice U8)) := sorry

/- [symcrust::hash::shake128_extract] -/
def hash.shake128_extract : hash.HashState → Slice U8 → Bool → Result (hash.HashState × (Slice U8)) := sorry

/- [zeroize::{zeroize::Zeroize for @Array<Z, N>}#4::zeroize]:
   Source: '/Users/sonho/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs', lines 373:4-373:25
   Name pattern: [zeroize::{zeroize::Zeroize<[@Z; @N]>}::zeroize] -/
def zeroize.ZeroizeArray.zeroize
  {Z : Type} {N : Usize} (ZeroizeInst : zeroize.Zeroize Z) :
  Array Z N → Result (Array Z N) := sorry

/- [zeroize::{zeroize::Zeroize for Z}::zeroize]:
   Source: '/Users/sonho/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs', lines 301:4-301:25
   Name pattern: [zeroize::{zeroize::Zeroize<@Z>}::zeroize] -/
def zeroize.Zeroize.Blanket.zeroize
  {Z : Type} (DefaultIsZeroesInst : zeroize.DefaultIsZeroes Z) : Z → Result Z := sorry

-- TODO: we shouldn't have this
/- [symcrust::common::{core::cmp::PartialEq<symcrust::common::Error> for symcrust::common::Error}#2::ne]:
   Source: '/rustc/library/core/src/cmp.rs', lines 261:4-261:37 -/
def common.PartialEqsymcrustcommonErrorsymcrustcommonError.ne
  : common.Error → common.Error → Result Bool := sorry

-- TODO: we shouldn't have this
/- [symcrust::key::{core::cmp::PartialEq<symcrust::key::Params> for symcrust::key::Params}#3::ne]:
   Source: '/rustc/library/core/src/cmp.rs', lines 261:4-261:37 -/
def key.PartialEqsymcrustkeyParamssymcrustkeyParams.ne
  : key.Params → key.Params → Result Bool := sorry

-- TODO: we shouldn't have this
/- [core::array::{core::clone::Clone for @Array<T, N>}#20::clone_from]:
   Source: '/rustc/library/core/src/array/mod.rs', lines 437:4-437:42
   Name pattern: [core::array::{core::clone::Clone<[@T; @N]>}::clone_from] -/
def core.array.CloneArray.clone_from
  {T : Type} {N : Usize} (cloneCloneInst : core.clone.Clone T) :
  Array T N → Array T N → Result (Array T N) := sorry

-- TODO: we shouldn't have this
/- [core::clone::Clone::clone_from]:
   Source: '/rustc/library/core/src/clone.rs', lines 174:4-174:43
   Name pattern: [core::clone::Clone::clone_from] -/
def core.clone.Clone.clone_from.default
  {Self : Type} (self_clause : core.clone.Clone Self) :
  Self → Self → Result Self := sorry

namespace Symcrust
