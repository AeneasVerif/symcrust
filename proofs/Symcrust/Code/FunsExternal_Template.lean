-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [symcrust]: external functions.
-- This is a template file: rename it to "FunsExternal.lean" and fill the holes.
import Aeneas
import Symcrust.Code.Types
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false
open Symcrust

/- [symcrust::common::{core::cmp::PartialEq<symcrust::common::Error> for symcrust::common::Error}#4::ne]:
   Source: '/rustc/library/core/src/cmp.rs', lines 261:4-261:37 -/
axiom common.PartialEqsymcrustcommonErrorsymcrustcommonError.ne
  : common.Error → common.Error → Result Bool

/- [core::fmt::rt::{core::fmt::rt::Argument<0>}#1::new_display]:
   Source: '/rustc/library/core/src/fmt/rt.rs', lines 113:4-113:57
   Name pattern: core::fmt::rt::{core::fmt::rt::Argument<'0>}::new_display -/
axiom core.fmt.rt.Argument.new_display
  {T : Type} (DisplayInst : (ERROR: "trait_decl_id: 3") T) :
  T → Result core.fmt.rt.Argument

/- [core::fmt::{core::fmt::Arguments<'a>}#2::new_v1]:
   Source: '/rustc/library/core/src/fmt/mod.rs', lines 348:4-351:22
   Name pattern: core::fmt::{core::fmt::Arguments<''a>}::new_v1 -/
axiom core.fmt.Arguments.new_v1
  {P : Usize} {A : Usize} :
  Array Str P → Array core.fmt.rt.Argument A → Result core.fmt.Arguments

/- [symcrust::common::SymCryptRandom]:
   Source: 'src/common.rs', lines 68:4-68:58 -/
axiom common.SymCryptRandom : MutRawPtr U8 → Usize → Result Unit

/- [symcrust::common::SymCryptModuleInit]:
   Source: 'src/common.rs', lines 69:4-69:48 -/
axiom common.SymCryptModuleInit : U32 → U32 → Result Unit

/- [core::slice::{@Slice<T>}::as_mut_ptr]:
   Source: '/rustc/library/core/src/slice/mod.rs', lines 772:4-772:48
   Name pattern: core::slice::{[@T]}::as_mut_ptr -/
axiom core.slice.Slice.as_mut_ptr
  {T : Type} : Slice T → Result ((MutRawPtr T) × (Slice T))

/- [alloc::boxed::{alloc::boxed::Box<T>}#7::into_raw]:
   Source: '/rustc/library/alloc/src/boxed.rs', lines 1278:4-1278:38
   Name pattern: alloc::boxed::{Box<@T>}::into_raw -/
axiom alloc.boxed.Box.into_raw
  {T : Type} (A : Type) : T → Result (MutRawPtr T)

/- [core::ptr::null_mut]:
   Source: '/rustc/library/core/src/ptr/mod.rs', lines 575:0-575:51
   Name pattern: core::ptr::null_mut -/
axiom core.ptr.null_mut
  {T : Type} (clauseInst : (ERROR: "trait_decl_id: 9") T) :
  Result (MutRawPtr T)

/- [alloc::boxed::{alloc::boxed::Box<T>}#6::from_raw]:
   Source: '/rustc/library/alloc/src/boxed.rs', lines 1060:4-1060:47
   Name pattern: alloc::boxed::{Box<@T>}::from_raw -/
axiom alloc.boxed.Box.from_raw {T : Type} : MutRawPtr T → Result T

/- [core::convert::{core::convert::TryInto<U, Clause2_Error> for T}#6::try_into]:
   Source: '/rustc/library/core/src/convert/mod.rs', lines 797:4-797:44
   Name pattern: core::convert::{core::convert::TryInto<@T, @U, @Clause2_Error>}::try_into -/
axiom core.convert.TryInto.try_into
  {T : Type} {U : Type} {Clause2_Error : Type} (TryFromInst :
  core.convert.TryFrom U T Clause2_Error) :
  T → Result (core.result.Result U Clause2_Error)

/- [core::result::{core::ops::try_trait::Try<T, core::result::Result<core::convert::Infallible, E>> for core::result::Result<T, E>}#26::branch]:
   Source: '/rustc/library/core/src/result.rs', lines 1995:4-1995:64
   Name pattern: core::result::{core::ops::try_trait::Try<core::result::Result<@T, @E>, @T, core::result::Result<core::convert::Infallible, @E>>}::branch -/
axiom
  core.result.TrycoreresultResultTcoreresultResultcoreconvertInfallibleE.branch
  {T : Type} {E : Type} :
  core.result.Result T E → Result (core.ops.control_flow.ControlFlow
    (core.result.Result core.convert.Infallible E) T)

/- [symcrust::key::{core::cmp::PartialEq<symcrust::key::Params> for symcrust::key::Params}#4::ne]:
   Source: '/rustc/library/core/src/cmp.rs', lines 261:4-261:37 -/
axiom key.PartialEqsymcrustkeyParamssymcrustkeyParams.ne
  : key.Params → key.Params → Result Bool

/- [alloc::boxed::{alloc::boxed::Box<T>}::try_new]:
   Source: '/rustc/library/alloc/src/boxed.rs', lines 339:4-339:52
   Name pattern: alloc::boxed::{Box<@T>}::try_new -/
axiom alloc.boxed.Box.try_new
  {T : Type} : T → Result (core.result.Result T core.alloc.AllocError)

/- [core::slice::{@Slice<T>}::as_ptr]:
   Source: '/rustc/library/core/src/slice/mod.rs', lines 741:4-741:42
   Name pattern: core::slice::{[@T]}::as_ptr -/
axiom core.slice.Slice.as_ptr {T : Type} : Slice T → Result (ConstRawPtr T)

/- [symcrust::hash::SymCryptSha3_512]:
   Source: 'src/hash.rs', lines 106:4-110:6 -/
axiom hash.SymCryptSha3_512
  :
  ConstRawPtr U8 → Usize → Array U8 64#usize → Result (Array U8 64#usize)

/- [symcrust::hash::SymCryptShake128Init]:
   Source: 'src/hash.rs', lines 68:4-68:53 -/
axiom hash.SymCryptShake128Init : hash.HashState → Result hash.HashState

/- [symcrust::hash::SymCryptShake128Append]:
   Source: 'src/hash.rs', lines 69:4-69:90 -/
axiom hash.SymCryptShake128Append
  : hash.HashState → ConstRawPtr U8 → Usize → Result hash.HashState

/- [symcrust::hash::SymCryptShake128StateCopy]:
   Source: 'src/hash.rs', lines 77:4-77:75 -/
axiom hash.SymCryptShake128StateCopy
  : hash.HashState → hash.HashState → Result hash.HashState

/- [symcrust::hash::SymCryptShake128Extract]:
   Source: 'src/hash.rs', lines 70:4-75:6 -/
axiom hash.SymCryptShake128Extract
  :
  hash.HashState → MutRawPtr U8 → Usize → Bool → Result hash.HashState

/- [symcrust::ntt::slice_to_sub_array]:
   Source: 'src/ntt.rs', lines 631:0-633:1 -/
axiom ntt.slice_to_sub_array
  (N : Usize) : Slice U8 → Usize → Result (Array U8 N)

/- [symcrust::mlkem::key_expand_public_matrix_from_public_seed]:
   Source: 'src/mlkem.rs', lines 82:0-108:1 -/
axiom mlkem.key_expand_public_matrix_from_public_seed
  :
  key.PreKey2 (Slice (Array U16 256#usize)) →
    ntt.InternalComputationTemporaries → Result ((key.PreKey2 (Slice (Array
    U16 256#usize))) × ntt.InternalComputationTemporaries)

/- [symcrust::hash::SymCryptShake256Init]:
   Source: 'src/hash.rs', lines 85:4-85:53 -/
axiom hash.SymCryptShake256Init : hash.HashState → Result hash.HashState

/- [symcrust::hash::SymCryptShake256Append]:
   Source: 'src/hash.rs', lines 86:4-86:90 -/
axiom hash.SymCryptShake256Append
  : hash.HashState → ConstRawPtr U8 → Usize → Result hash.HashState

/- [symcrust::hash::SymCryptShake256StateCopy]:
   Source: 'src/hash.rs', lines 94:4-94:75 -/
axiom hash.SymCryptShake256StateCopy
  : hash.HashState → hash.HashState → Result hash.HashState

/- [symcrust::hash::SymCryptShake256Extract]:
   Source: 'src/hash.rs', lines 87:4-92:6 -/
axiom hash.SymCryptShake256Extract
  :
  hash.HashState → MutRawPtr U8 → Usize → Bool → Result hash.HashState

/- [core::slice::{@Slice<T>}::split_at_mut]:
   Source: '/rustc/library/core/src/slice/mod.rs', lines 1908:4-1908:76
   Name pattern: core::slice::{[@T]}::split_at_mut -/
axiom core.slice.Slice.split_at_mut
  {T : Type} :
  Slice T → Usize → Result (((Slice T) × (Slice T)) × (((Slice T) ×
    (Slice T)) → Slice T))

/- [zeroize::{zeroize::Zeroize for @Array<Z, N>}#4::zeroize]:
   Source: '/Users/sonho/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs', lines 373:4-373:25
   Name pattern: zeroize::{zeroize::Zeroize<[@Z; @N]>}::zeroize -/
axiom zeroize.ZeroizeArray.zeroize
  {Z : Type} {N : Usize} (ZeroizeInst : zeroize.Zeroize Z) :
  Array Z N → Result (Array Z N)

/- [zeroize::{zeroize::Zeroize for Z}::zeroize]:
   Source: '/Users/sonho/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs', lines 301:4-301:25
   Name pattern: zeroize::{zeroize::Zeroize<@Z>}::zeroize -/
axiom zeroize.Zeroize.zeroize
  {Z : Type} (DefaultIsZeroesInst : zeroize.DefaultIsZeroes Z) : Z → Result Z

/- [core::default::{core::default::Default for u32}#7::default]:
   Source: '/rustc/library/core/src/default.rs', lines 156:12-156:30
   Name pattern: core::default::{core::default::Default<u32>}::default -/
axiom core.default.DefaultU32.default : Result U32

/- [core::slice::{@Slice<T>}::swap]:
   Source: '/rustc/library/core/src/slice/mod.rs', lines 882:4-882:52
   Name pattern: core::slice::{[@T]}::swap -/
axiom core.slice.Slice.swap
  {T : Type} : Slice T → Usize → Usize → Result (Slice T)

/- [symcrust::hash::SymCryptSha3_256Init]:
   Source: 'src/hash.rs', lines 101:4-101:53 -/
axiom hash.SymCryptSha3_256Init : hash.HashState → Result hash.HashState

/- [symcrust::hash::SymCryptSha3_256Append]:
   Source: 'src/hash.rs', lines 102:4-102:90 -/
axiom hash.SymCryptSha3_256Append
  : hash.HashState → ConstRawPtr U8 → Usize → Result hash.HashState

/- [symcrust::hash::SymCryptSha3_256Result]:
   Source: 'src/hash.rs', lines 103:4-103:99 -/
axiom hash.SymCryptSha3_256Result
  :
  hash.HashState → Array U8 32#usize → Result (hash.HashState × (Array U8
    32#usize))

/- [core::default::{core::default::Default for u8}#5::default]:
   Source: '/rustc/library/core/src/default.rs', lines 156:12-156:30
   Name pattern: core::default::{core::default::Default<u8>}::default -/
axiom core.default.DefaultU8.default : Result U8

/- [symcrust::mlkem::key_expand_from_private_seed]:
   Source: 'src/mlkem.rs', lines 122:0-227:1 -/
axiom mlkem.key_expand_from_private_seed
  :
  key.PreKey2 (Slice (Array U16 256#usize)) →
    ntt.InternalComputationTemporaries → Result ((key.PreKey2 (Slice (Array
    U16 256#usize))) × ntt.InternalComputationTemporaries)

/- [core::slice::raw::from_raw_parts]:
   Source: '/rustc/library/core/src/slice/raw.rs', lines 123:0-123:80
   Name pattern: core::slice::raw::from_raw_parts -/
axiom core.slice.raw.from_raw_parts
  {T : Type} : ConstRawPtr T → Usize → Result (Slice T)

/- [core::slice::raw::from_raw_parts_mut]:
   Source: '/rustc/library/core/src/slice/raw.rs', lines 177:0-177:86
   Name pattern: core::slice::raw::from_raw_parts_mut -/
axiom core.slice.raw.from_raw_parts_mut
  {T : Type} :
  MutRawPtr T → Usize → Result ((Slice T) × (Slice T → Unit))

/- [core::array::{core::convert::TryFrom<&'a (@Slice<T>), core::array::TryFromSliceError> for &'a (@Array<T, N>)}#9::try_from]:
   Source: '/rustc/library/core/src/array/mod.rs', lines 284:4-284:72
   Name pattern: core::array::{core::convert::TryFrom<&''a [@T; @N], &''a [@T], core::array::TryFromSliceError>}::try_from -/
axiom core.array.TryFrom&'a Array&'a SlicecorearrayTryFromSliceError.try_from
  {T : Type} (N : Usize) :
  Slice T → Result (core.result.Result (Array T N)
    core.array.TryFromSliceError)

/- [symcrust::hash::SymCryptSha3_512Init]:
   Source: 'src/hash.rs', lines 111:4-111:53 -/
axiom hash.SymCryptSha3_512Init : hash.HashState → Result hash.HashState

/- [symcrust::hash::SymCryptSha3_512Append]:
   Source: 'src/hash.rs', lines 112:4-112:90 -/
axiom hash.SymCryptSha3_512Append
  : hash.HashState → ConstRawPtr U8 → Usize → Result hash.HashState

/- [core::array::{core::convert::TryFrom<&'a mut (@Slice<T>), core::array::TryFromSliceError> for &'a mut (@Array<T, N>)}#10::try_from]:
   Source: '/rustc/library/core/src/array/mod.rs', lines 312:4-312:80
   Name pattern: core::array::{core::convert::TryFrom<&''a mut [@T; @N], &''a mut [@T], core::array::TryFromSliceError>}::try_from -/
axiom
  core.array.TryFrom&'a mut Array&'a mut SlicecorearrayTryFromSliceError.try_from
  {T : Type} (N : Usize) :
  Slice T → Result ((core.result.Result (Array T N)
    core.array.TryFromSliceError) × (core.result.Result (Array T N)
    core.array.TryFromSliceError → Slice T))

/- [symcrust::hash::SymCryptSha3_512Result]:
   Source: 'src/hash.rs', lines 113:4-113:99 -/
axiom hash.SymCryptSha3_512Result
  :
  hash.HashState → Array U8 64#usize → Result (hash.HashState × (Array U8
    64#usize))

/- [alloc::vec::from_elem]:
   Source: '/rustc/library/alloc/src/vec/mod.rs', lines 3174:0-3174:55
   Name pattern: alloc::vec::from_elem -/
axiom alloc.vec.from_elem
  {T : Type} (corecloneCloneInst : core.clone.Clone T) :
  T → Usize → Result (alloc.vec.Vec T)

/- [core::array::{core::clone::Clone for @Array<T, N>}#20::clone]:
   Source: '/rustc/library/core/src/array/mod.rs', lines 432:4-432:27
   Name pattern: core::array::{core::clone::Clone<[@T; @N]>}::clone -/
axiom core.array.CloneArray.clone
  {T : Type} {N : Usize} (cloneCloneInst : core.clone.Clone T) :
  Array T N → Result (Array T N)

/- [alloc::vec::{alloc::vec::Vec<T, A>}#1::into_boxed_slice]:
   Source: '/rustc/library/alloc/src/vec/mod.rs', lines 1470:4-1470:52
   Name pattern: alloc::vec::{alloc::vec::Vec<@T, @A>}::into_boxed_slice -/
axiom alloc.vec.Vec.into_boxed_slice
  {T : Type} {A : Type} : alloc.vec.Vec T → Result (Slice T)

/- [core::default::{core::default::Default for u16}#6::default]:
   Source: '/rustc/library/core/src/default.rs', lines 156:12-156:30
   Name pattern: core::default::{core::default::Default<u16>}::default -/
axiom core.default.DefaultU16.default : Result U16

/- [symcrust::mlkem::encapsulate_internal]:
   Source: 'src/mlkem.rs', lines 584:0-746:1 -/
axiom mlkem.encapsulate_internal
  :
  key.PreKey2 (Slice (Array U16 256#usize)) → Slice U8 → Slice U8 → Array
    U8 32#usize → ntt.InternalComputationTemporaries → Result (common.Error
    × (key.PreKey2 (Slice (Array U16 256#usize))) × (Slice U8) × (Slice U8)
    × ntt.InternalComputationTemporaries)

/- [alloc::vec::{alloc::vec::Vec<T, alloc::alloc::Global>}::try_with_capacity]:
   Source: '/rustc/library/alloc/src/vec/mod.rs', lines 498:4-498:78
   Name pattern: alloc::vec::{alloc::vec::Vec<@T, alloc::alloc::Global>}::try_with_capacity -/
axiom alloc.vec.VecTallocallocGlobal.try_with_capacity
  (T : Type) :
  Usize → Result (core.result.Result (alloc.vec.Vec T)
    alloc.collections.TryReserveError)

/- [core::slice::cmp::{core::cmp::PartialEq<@Slice<U>> for @Slice<T>}::eq]:
   Source: '/rustc/library/core/src/slice/cmp.rs', lines 14:4-14:37
   Name pattern: core::slice::cmp::{core::cmp::PartialEq<[@T], [@U]>}::eq -/
axiom core.slice.cmp.PartialEqSliceSlice.eq
  {T : Type} {U : Type} (cmpPartialEqInst : core.cmp.PartialEq T U) :
  Slice T → Slice U → Result Bool

/- [core::slice::cmp::{core::cmp::PartialEq<@Slice<U>> for @Slice<T>}::ne]:
   Source: '/rustc/library/core/src/cmp.rs', lines 261:4-261:37
   Name pattern: core::slice::cmp::{core::cmp::PartialEq<[@T], [@U]>}::ne -/
axiom core.slice.cmp.PartialEqSliceSlice.ne
  {T : Type} {U : Type} (cmpPartialEqInst : core.cmp.PartialEq T U) :
  Slice T → Slice U → Result Bool

/- [core::fmt::{core::fmt::Arguments<'a>}#2::new_const]:
   Source: '/rustc/library/core/src/fmt/mod.rs', lines 340:4-340:81
   Name pattern: core::fmt::{core::fmt::Arguments<''a>}::new_const -/
axiom core.fmt.Arguments.new_const
  {N : Usize} : Array Str N → Result core.fmt.Arguments

/- [std::io::stdio::_print]:
   Source: '/rustc/library/std/src/io/stdio.rs', lines 1231:0-1231:39
   Name pattern: std::io::stdio::_print -/
axiom std.io.stdio._print : core.fmt.Arguments → Result Unit

/- [symcrust::hash::SymCryptShake128Default]:
   Source: 'src/hash.rs', lines 62:4-66:6 -/
axiom hash.SymCryptShake128Default
  :
  ConstRawPtr U8 → Usize → Array U8 32#usize → Result (Array U8 32#usize)

/- [symcrust::hash::SymCryptShake128]:
   Source: 'src/hash.rs', lines 67:4-67:96 -/
axiom hash.SymCryptShake128
  : ConstRawPtr U8 → Usize → MutRawPtr U8 → Usize → Result Unit

/- [symcrust::hash::SymCryptShake128Result]:
   Source: 'src/hash.rs', lines 76:4-76:99 -/
axiom hash.SymCryptShake128Result
  :
  hash.HashState → Array U8 32#usize → Result (hash.HashState × (Array U8
    32#usize))

/- [symcrust::hash::SymCryptShake256Default]:
   Source: 'src/hash.rs', lines 79:4-83:6 -/
axiom hash.SymCryptShake256Default
  :
  ConstRawPtr U8 → Usize → Array U8 64#usize → Result (Array U8 64#usize)

/- [symcrust::hash::SymCryptShake256]:
   Source: 'src/hash.rs', lines 84:4-84:96 -/
axiom hash.SymCryptShake256
  : ConstRawPtr U8 → Usize → MutRawPtr U8 → Usize → Result Unit

/- [symcrust::hash::SymCryptShake256Result]:
   Source: 'src/hash.rs', lines 93:4-93:99 -/
axiom hash.SymCryptShake256Result
  :
  hash.HashState → Array U8 64#usize → Result (hash.HashState × (Array U8
    64#usize))

/- [symcrust::hash::SymCryptSha3_256]:
   Source: 'src/hash.rs', lines 96:4-100:6 -/
axiom hash.SymCryptSha3_256
  :
  ConstRawPtr U8 → Usize → Array U8 32#usize → Result (Array U8 32#usize)

/- [symcrust::hash::SymCryptSha3_256StateCopy]:
   Source: 'src/hash.rs', lines 104:4-104:75 -/
axiom hash.SymCryptSha3_256StateCopy
  : hash.HashState → hash.HashState → Result hash.HashState

/- [symcrust::hash::SymCryptSha3_512StateCopy]:
   Source: 'src/hash.rs', lines 114:4-114:75 -/
axiom hash.SymCryptSha3_512StateCopy
  : hash.HashState → hash.HashState → Result hash.HashState

/- [alloc::vec::{core::convert::From<alloc::vec::Vec<T, A>> for alloc::boxed::Box<@Slice<T>>}#39::from]:
   Source: '/rustc/library/alloc/src/vec/mod.rs', lines 3967:4-3967:33
   Name pattern: alloc::vec::{core::convert::From<Box<[@T]>, alloc::vec::Vec<@T, @A>>}::from -/
axiom alloc.vec.FromBoxSliceallocvecVec.from
  {T : Type} {A : Type} : alloc.vec.Vec T → Result (Slice T)

/- [core::ptr::const_ptr::{*const T}::cast]:
   Source: '/rustc/library/core/src/ptr/const_ptr.rs', lines 62:4-62:42
   Name pattern: core::ptr::const_ptr::{*const @T}::cast -/
axiom core.ptr.const_ptr.RawPtrConstT.cast
  {T : Type} (U : Type) : ConstRawPtr T → Result (ConstRawPtr U)

/- [core::ptr::mut_ptr::{*mut T}::cast]:
   Source: '/rustc/library/core/src/ptr/mut_ptr.rs', lines 44:4-44:40
   Name pattern: core::ptr::mut_ptr::{*mut @T}::cast -/
axiom core.ptr.mut_ptr.RawPtrMutT.cast
  {T : Type} (U : Type) : MutRawPtr T → Result (MutRawPtr U)

/- [core::result::{core::ops::try_trait::FromResidual<core::result::Result<core::convert::Infallible, E>> for core::result::Result<T, F>}#27::from_residual]:
   Source: '/rustc/library/core/src/result.rs', lines 2007:4-2007:70
   Name pattern: core::result::{core::ops::try_trait::FromResidual<core::result::Result<@T, @F>, core::result::Result<core::convert::Infallible, @E>>}::from_residual -/
axiom
  core.result.FromResidualcoreresultResultcoreresultResultcoreconvertInfallibleE.from_residual
  (T : Type) {E : Type} {F : Type} (convertFromInst : core.convert.From F E) :
  core.result.Result core.convert.Infallible E → Result (core.result.Result T
    F)

/- [core::result::{core::ops::try_trait::Try<T, core::result::Result<core::convert::Infallible, E>> for core::result::Result<T, E>}#26::from_output]:
   Source: '/rustc/library/core/src/result.rs', lines 1990:4-1990:48
   Name pattern: core::result::{core::ops::try_trait::Try<core::result::Result<@T, @E>, @T, core::result::Result<core::convert::Infallible, @E>>}::from_output -/
axiom
  core.result.TrycoreresultResultTcoreresultResultcoreconvertInfallibleE.from_output
  {T : Type} (E : Type) : T → Result (core.result.Result T E)

