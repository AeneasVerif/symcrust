-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [symcrust]: external functions.
-- This is a template file: rename it to "FunsExternal.lean" and fill the holes.
import Aeneas
import Symcrust.Code.Types
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false
open Symcrust

/- [symcrust::common::{core::cmp::PartialEq<symcrust::common::Error> for symcrust::common::Error}#4::ne]:
   Source: '/rustc/library/core/src/cmp.rs', lines 262:4-262:37 -/
axiom common.PartialEqsymcrustcommonErrorsymcrustcommonError.ne
  : common.Error → common.Error → Result Bool

/- [symcrust::common::SymCryptRandom]:
   Source: 'src/common.rs', lines 68:4-68:58 -/
axiom common.SymCryptRandom : MutRawPtr U8 → Usize → Result Unit

/- [symcrust::common::SymCryptModuleInit]:
   Source: 'src/common.rs', lines 69:4-69:48 -/
axiom common.SymCryptModuleInit : U32 → U32 → Result Unit

/- [symcrust::common::random]:
   Source: 'src/common.rs', lines 72:0-82:1 -/
axiom common.random : Slice U8 → Result (common.Error × (Slice U8))

/- [symcrust::hash::shake128_extract]:
   Source: 'src/hash.rs', lines 146:0-150:1 -/
axiom hash.shake128_extract
  :
  hash.HashState → Slice U8 → Bool → Result (hash.HashState × (Slice
    U8))

/- [symcrust::key::{core::cmp::PartialEq<symcrust::key::Params> for symcrust::key::Params}#3::ne]:
   Source: '/rustc/library/core/src/cmp.rs', lines 262:4-262:37 -/
axiom key.PartialEqsymcrustkeyParamssymcrustkeyParams.ne
  : key.Params → key.Params → Result Bool

/- [core::array::{core::clone::Clone for @Array<T, N>}#20::clone_from]:
   Source: '/rustc/library/core/src/array/mod.rs', lines 424:4-424:42
   Name pattern: [core::array::{core::clone::Clone<[@T; @N]>}::clone_from] -/
axiom core.array.CloneArray.clone_from
  {T : Type} {N : Usize} (cloneCloneInst : core.clone.Clone T) :
  Array T N → Array T N → Result (Array T N)

/- [symcrust::ntt::slice_to_sub_array]:
   Source: 'src/ntt.rs', lines 642:0-644:1 -/
axiom ntt.slice_to_sub_array
  (N : Usize) : Slice U8 → Usize → Result (Array U8 N)

/- [zeroize::{zeroize::Zeroize for @Array<Z, N>}#4::zeroize]:
   Source: '/Users/sonho/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/src/lib.rs', lines 373:4-373:25
   Name pattern: [zeroize::{zeroize::Zeroize<[@Z; @N]>}::zeroize] -/
axiom zeroize.ZeroizeArray.zeroize
  {Z : Type} {N : Usize} (ZeroizeInst : zeroize.Zeroize Z) :
  Array Z N → Result (Array Z N)

/- [zeroize::{zeroize::Zeroize for Z}::zeroize]:
   Source: '/Users/sonho/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/src/lib.rs', lines 301:4-301:25
   Name pattern: [zeroize::{zeroize::Zeroize<@Z>}::zeroize] -/
axiom zeroize.Zeroize.Blanket.zeroize
  {Z : Type} (DefaultIsZeroesInst : zeroize.DefaultIsZeroes Z) : Z → Result Z

