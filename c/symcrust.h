/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/jonathan/Code/eurydice/eurydice symcrust.llbc --output c/
  F* version: <unknown>
  KaRaMeL version: 7f0d2a76
 */

#ifndef __symcrust_H
#define __symcrust_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "Eurydice.h"
#include "eurydice_glue.h"

extern uint8_t core_clone_impls___core__clone__Clone_for_u8__6__clone(uint8_t *x0);

static inline uint32_t
core_convert_num___core__convert__From_u16__for_u32__69__from(uint16_t x0);

static inline uint16_t core_num__u16_7__from_le_bytes(uint8_t x0[2U]);

static inline uint32_t core_num__u32_8__from_le_bytes(uint8_t x0[4U]);

static inline void core_num__u32_8__to_le_bytes(uint32_t x0, uint8_t x1[4U]);

typedef struct symcrust_misc_Temporaries_s
{
  uint8_t data1[16U];
  uint8_t data2[16U];
}
symcrust_misc_Temporaries;

extern void symcrust_misc_main(void);

#define SYMCRUST_NTT_COMPRESS_MULCONSTANT (10321339U)

#define SYMCRUST_NTT_COMPRESS_SHIFTCONSTANT (35U)

typedef struct symcrust_ntt_INTERNAL_COMPUTATION_TEMPORARIES_s
{
  uint16_t abVectorBuffer0[4U][256U];
  uint16_t abVectorBuffer1[4U][256U];
  uint16_t abPolyElementBuffer0[256U];
  uint16_t abPolyElementBuffer1[256U];
  uint32_t abPolyElementAccumulatorBuffer[256U];
}
symcrust_ntt_INTERNAL_COMPUTATION_TEMPORARIES;

typedef struct symcrust_ntt_INTERNAL_PARAMS_s
{
  uint32_t params;
  uint32_t cbPolyElement;
  uint32_t cbVector;
  uint32_t cbMatrix;
  uint8_t nRows;
  uint8_t nEta1;
  uint8_t nEta2;
  uint8_t nBitsOfU;
  uint8_t nBitsOfV;
}
symcrust_ntt_INTERNAL_PARAMS;

#define SYMCRUST_NTT_INTTFIXUPTIMESRSQR (1441U)

#define SYMCRUST_NTT_INTTFIXUPTIMESRSQRTIMESNEGQINVMODR (10079U)

typedef struct symcrust_ntt_MATRIX_s
{
  size_t nRows;
  uint16_t *apPolyElements[16U];
}
symcrust_ntt_MATRIX;

typedef struct symcrust_ntt_KEY_s
{
  uint32_t fAlgorithmInfo;
  symcrust_ntt_INTERNAL_PARAMS params;
  uint32_t cbTotalSize;
  bool hasPrivateSeed;
  bool hasPrivateKey;
  uint8_t privateSeed[32U];
  uint8_t privateRandom[32U];
  uint8_t publicSeed[32U];
  symcrust_ntt_MATRIX pmAtranspose;
  Eurydice_slice pvt;
  Eurydice_slice pvs;
  uint8_t encodedT[1536U];
  uint8_t encapsKeyHash[32U];
}
symcrust_ntt_KEY;

#define SYMCRUST_NTT_KEY_MAX_SIZEOF_ENCODED_T ((size_t)1536U)

#define SYMCRUST_NTT_MATRIX_MAX_NROWS ((size_t)4U)

#define symcrust_ntt_NO_ERROR 0
#define symcrust_ntt_INVALID_BLOB 1

typedef uint8_t symcrust_ntt_MLKEM_ERROR;

#define SYMCRUST_NTT_MLWE_POLYNOMIAL_COEFFICIENTS ((size_t)256U)

extern const uint16_t symcrust_ntt_MlKemZetaBitRevTimesR[128U];

extern const uint16_t symcrust_ntt_MlKemZetaBitRevTimesRTimesNegQInvModR[128U];

#define SYMCRUST_NTT_NEGQINVMODR (3327U)

typedef uint16_t symcrust_ntt_POLYELEMENT[256U];

typedef uint32_t symcrust_ntt_POLYELEMENT_ACCUMULATOR[256U];

#define SYMCRUST_NTT_Q (3329U)

#define SYMCRUST_NTT_RLOG2 (16U)

#define SYMCRUST_NTT_RMASK (65535U)

#define SYMCRUST_NTT_RSQR (1353U)

#define SYMCRUST_NTT_RSQRTIMESNEGQINVMODR (44983U)

#define SYMCRUST_NTT_SIZEOF_AGREED_SECRET ((size_t)32U)

#define SYMCRUST_NTT_SIZEOF_ENCAPS_RANDOM ((size_t)32U)

#define SYMCRUST_NTT_SIZEOF_MAX_CIPHERTEXT ((size_t)1568U)

uint32_t symcrust_ntt_SymCryptMlKemModAdd(uint32_t a, uint32_t b);

uint32_t symcrust_ntt_SymCryptMlKemModSub(uint32_t a, uint32_t b);

uint32_t symcrust_ntt_SymCryptMlKemMontMul(uint32_t a, uint32_t b, uint32_t bMont);

void
symcrust_ntt_SymCryptMlKemMontgomeryReduceAndAddPolyElementAccumulatorToPolyElement(
  uint32_t *paSrc,
  uint16_t *peDst
);

void
symcrust_ntt_SymCryptMlKemPolyElementAdd(uint16_t *peSrc1, uint16_t *peSrc2, uint16_t *peDst);

uint32_t symcrust_ntt_min(uint32_t x, uint32_t y);

void
symcrust_ntt_SymCryptMlKemPolyElementCompressAndEncode_inner_loop(
  Eurydice_slice pbDst,
  size_t *cbDstWritten,
  uint32_t *accumulator,
  uint32_t *nBitsInAccumulator,
  uint32_t *nBitsInCoefficient,
  uint32_t *coefficient
);

void
symcrust_ntt_SymCryptMlKemPolyElementCompressAndEncode(
  uint16_t *peSrc,
  uint32_t nBitsPerCoefficient,
  Eurydice_slice pbDst
);

#define symcrust_ntt_slice_to_sub_array(x_0, x_1, x_2, x_3, _ret_t) symcrust_ntt_slice_to_sub_array_(x_0, x_1, x_2, x_3)

extern void
symcrust_ntt_slice_to_sub_array_(size_t x0, Eurydice_slice x1, size_t x2, uint8_t *x3);

void
symcrust_ntt_SymCryptMlKemPolyElementDecodeAndDecompress_inner_loop(
  Eurydice_slice pbSrc,
  uint32_t nBitsPerCoefficient,
  size_t *cbSrcRead,
  uint32_t *accumulator,
  uint32_t *nBitsInAccumulator,
  uint32_t *coefficient,
  uint32_t *nBitsInCoefficient
);

symcrust_ntt_MLKEM_ERROR
symcrust_ntt_SymCryptMlKemPolyElementDecodeAndDecompress(
  Eurydice_slice pbSrc,
  uint32_t nBitsPerCoefficient,
  uint16_t *peDst
);

void
symcrust_ntt_SymCryptMlKemPolyElementINTTLayerC_inner_loop(
  uint16_t *peSrc,
  size_t len,
  size_t start,
  uint32_t twiddleFactor,
  uint32_t twiddleFactorMont
);

void symcrust_ntt_SymCryptMlKemPolyElementINTTLayerC(uint16_t *peSrc, size_t k, size_t len);

void symcrust_ntt_SymCryptMlKemPolyElementINTTLayer(uint16_t *peSrc, size_t k, size_t len);

void symcrust_ntt_SymCryptMlKemPolyElementINTTAndMulR(uint16_t *peSrc);

extern const uint16_t symcrust_ntt_zetaTwoTimesBitRevPlus1TimesR[128U];

void
symcrust_ntt_SymCryptMlKemPolyElementMulAndAccumulate(
  uint16_t *peSrc1,
  uint16_t *peSrc2,
  uint32_t *paDst
);

void symcrust_ntt_SymCryptMlKemPolyElementMulR(uint16_t *peSrc, uint16_t *peDst);

void
symcrust_ntt_SymCryptMlKemPolyElementNTTLayerC_inner_loop(
  uint16_t *peSrc,
  size_t len,
  size_t start,
  uint32_t twiddleFactor,
  uint32_t twiddleFactorMont
);

void symcrust_ntt_SymCryptMlKemPolyElementNTTLayerC(uint16_t *peSrc, size_t k, size_t len);

void symcrust_ntt_SymCryptMlKemPolyElementNTTLayer(uint16_t *peSrc, size_t k, size_t len);

void symcrust_ntt_SymCryptMlKemPolyElementNTT(uint16_t *peSrc);

void
symcrust_ntt_SymCryptMlKemPolyElementSampleCBDFromBytes_then_inner_loop(
  uint16_t *peDst,
  size_t i,
  uint32_t *sampleBits
);

void
symcrust_ntt_SymCryptMlKemPolyElementSampleCBDFromBytes_else_inner_loop(
  uint16_t *peDst,
  size_t i,
  uint32_t *sampleBits
);

void
symcrust_ntt_SymCryptMlKemPolyElementSampleCBDFromBytes(
  Eurydice_slice pbSrc,
  uint32_t eta,
  uint16_t *peDst
);

extern void symcrust_ntt_SymCryptShake128Extract(uint8_t *x0, Eurydice_slice x1, bool x2);

void
symcrust_ntt_SymCryptMlKemPolyElementSampleNTTFromShake128(uint8_t *pState, uint16_t *peDst);

void
symcrust_ntt_SymCryptMlKemPolyElementSub(uint16_t *peSrc1, uint16_t *peSrc2, uint16_t *peDst);

typedef uint8_t symcrust_ntt_sha3_256State[0U];

typedef uint8_t symcrust_ntt_sha3_512State[0U];

typedef uint8_t symcrust_ntt_shake128State[0U];

typedef uint8_t symcrust_ntt_shake256State[0U];

#if defined(__cplusplus)
}
#endif

#define __symcrust_H_DEFINED
#endif
