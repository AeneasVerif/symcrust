/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/jonathan/Code/eurydice/eurydice symcrust.llbc --output c/ -fcomments
  F* version: <unknown>
  KaRaMeL version: 9e919b8e
 */

#ifndef __symcrust_H
#define __symcrust_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

#include "Eurydice.h"

#define core_result_Ok 0
#define core_result_Err 1

typedef uint8_t core_result_Result_10;

extern core_result_Result_10
core_array___core__fmt__Debug_for_core__array__TryFromSliceError__26__fmt(
  core_array_TryFromSliceError *x0,
  core_fmt_Formatter *x1
);

extern uint8_t core_clone_impls___core__clone__Clone_for_u8__6__clone(uint8_t *x0);

extern bool core_cmp_impls___core__cmp__PartialEq_u8__for_u8__22__eq(uint8_t *x0, uint8_t *x1);

extern bool core_cmp_impls___core__cmp__PartialEq_u8__for_u8__22__ne(uint8_t *x0, uint8_t *x1);

static inline uint32_t
core_convert_num___core__convert__From_u16__for_u32__69__from(uint16_t x0);

extern core_result_Result_10
core_fmt__core__fmt__Formatter__a__11__write_str(core_fmt_Formatter *x0, Prims_string x1);

static inline uint16_t core_num__u16_7__from_le_bytes(uint8_t x0[2U]);

static inline uint32_t core_num__u32_8__from_le_bytes(uint8_t x0[4U]);

static inline void core_num__u32_8__to_le_bytes(uint32_t x0, uint8_t x1[4U]);

static inline uint32_t core_num__u32_8__wrapping_add(uint32_t x0, uint32_t x1);

static inline uint32_t core_num__u32_8__wrapping_mul(uint32_t x0, uint32_t x1);

static inline uint32_t core_num__u32_8__wrapping_sub(uint32_t x0, uint32_t x1);

static inline size_t core_num__usize_11__wrapping_sub(size_t x0, size_t x1);

#define core_panicking_AssertKind_Eq 0
#define core_panicking_AssertKind_Ne 1
#define core_panicking_AssertKind_Match 2

typedef uint8_t core_panicking_AssertKind;

#define symcrust_common_Error_NoError 0
#define symcrust_common_Error_Unused 32768
#define symcrust_common_Error_WrongKeySize 32769
#define symcrust_common_Error_WrongBlockSize 32770
#define symcrust_common_Error_WrongDataSize 32771
#define symcrust_common_Error_WrongNonceSize 32772
#define symcrust_common_Error_WrongTagSize 32773
#define symcrust_common_Error_WrongIterationCount 32774
#define symcrust_common_Error_AuthenticationFailure 32775
#define symcrust_common_Error_ExternalFailure 32776
#define symcrust_common_Error_FipsFailure 32777
#define symcrust_common_Error_HardwareFailure 32778
#define symcrust_common_Error_NotImplemented 32779
#define symcrust_common_Error_InvalidBlob 32780
#define symcrust_common_Error_BufferTooSmall 32781
#define symcrust_common_Error_InvalidArgument 32782
#define symcrust_common_Error_MemoryAllocationFailure 32783
#define symcrust_common_Error_SignatureVerificationFailure 32784
#define symcrust_common_Error_IncompatibleFormat 32785
#define symcrust_common_Error_ValueTooLarge 32786
#define symcrust_common_Error_SessionReplayFailure 32787
#define symcrust_common_Error_HbsNoOtsKeysLeft 32788
#define symcrust_common_Error_HbsPublicRootMismatch 32789

typedef uint16_t symcrust_common_Error;

extern void symcrust_common_SymCryptModuleInit(uint32_t x0, uint32_t x1);

extern void symcrust_common_SymCryptRandom(uint8_t *x0, size_t x1);

extern void symcrust_common_SymCryptWipe(uint8_t *x0, size_t x1);

void symcrust_common_init(void);

symcrust_common_Error symcrust_common_random(Eurydice_slice dst);

void symcrust_common_wipe(uint8_t *pb_data, size_t cb_data);

/**
This function found in impl {(core::cmp::PartialEq<symcrust::common::Error> for symcrust::common::Error)#1}
*/
bool symcrust_common_eq_3d(symcrust_common_Error *self, symcrust_common_Error *other);

extern bool
symcrust_common___core__cmp__PartialEq_symcrust__common__Error__for_symcrust__common__Error__1__ne(
  symcrust_common_Error *x0,
  symcrust_common_Error *x1
);

/**
This function found in impl {(core::fmt::Debug for symcrust::common::Error)#2}
*/
core_result_Result_10
symcrust_common_fmt_06(symcrust_common_Error *self, core_fmt_Formatter *f);

typedef struct symcrust_hash_KeccakState_s
{
  uint64_t state[25U];
  uint32_t input_block_size;
  uint32_t state_index;
  uint8_t padding_value;
  bool squeeze_mode;
}
symcrust_hash_KeccakState;

typedef struct symcrust_hash_HashState_s
{
  symcrust_hash_KeccakState ks;
  size_t magic;
}
symcrust_hash_HashState;

#define SYMCRUST_HASH_SHA3_256_INPUT_BLOCK_SIZE ((size_t)136U)

#define SYMCRUST_HASH_SHA3_256_RESULT_SIZE ((size_t)32U)

#define SYMCRUST_HASH_SHA3_512_INPUT_BLOCK_SIZE ((size_t)72U)

#define SYMCRUST_HASH_SHA3_512_RESULT_SIZE ((size_t)64U)

#define SYMCRUST_HASH_SHAKE128_INPUT_BLOCK_SIZE ((size_t)168U)

#define SYMCRUST_HASH_SHAKE128_RESULT_SIZE ((size_t)32U)

#define SYMCRUST_HASH_SHAKE256_INPUT_BLOCK_SIZE ((size_t)136U)

#define SYMCRUST_HASH_SHAKE256_RESULT_SIZE ((size_t)64U)

extern void symcrust_hash_SymCryptSha3_256(uint8_t *x0, size_t x1, uint8_t *x2);

extern void
symcrust_hash_SymCryptSha3_256Append(symcrust_hash_HashState *x0, uint8_t *x1, size_t x2);

extern void symcrust_hash_SymCryptSha3_256Init(symcrust_hash_HashState *x0);

extern void symcrust_hash_SymCryptSha3_256Result(symcrust_hash_HashState *x0, uint8_t *x1);

extern void
symcrust_hash_SymCryptSha3_256StateCopy(
  symcrust_hash_HashState *x0,
  symcrust_hash_HashState *x1
);

extern void symcrust_hash_SymCryptSha3_512(uint8_t *x0, size_t x1, uint8_t *x2);

extern void
symcrust_hash_SymCryptSha3_512Append(symcrust_hash_HashState *x0, uint8_t *x1, size_t x2);

extern void symcrust_hash_SymCryptSha3_512Init(symcrust_hash_HashState *x0);

extern void symcrust_hash_SymCryptSha3_512Result(symcrust_hash_HashState *x0, uint8_t *x1);

extern void
symcrust_hash_SymCryptSha3_512StateCopy(
  symcrust_hash_HashState *x0,
  symcrust_hash_HashState *x1
);

extern void symcrust_hash_SymCryptShake128(uint8_t *x0, size_t x1, uint8_t *x2, size_t x3);

extern void
symcrust_hash_SymCryptShake128Append(symcrust_hash_HashState *x0, uint8_t *x1, size_t x2);

extern void symcrust_hash_SymCryptShake128Default(uint8_t *x0, size_t x1, uint8_t *x2);

extern void
symcrust_hash_SymCryptShake128Extract(
  symcrust_hash_HashState *x0,
  uint8_t *x1,
  size_t x2,
  bool x3
);

extern void symcrust_hash_SymCryptShake128Init(symcrust_hash_HashState *x0);

extern void symcrust_hash_SymCryptShake128Result(symcrust_hash_HashState *x0, uint8_t *x1);

extern void
symcrust_hash_SymCryptShake128StateCopy(
  symcrust_hash_HashState *x0,
  symcrust_hash_HashState *x1
);

extern void symcrust_hash_SymCryptShake256(uint8_t *x0, size_t x1, uint8_t *x2, size_t x3);

extern void
symcrust_hash_SymCryptShake256Append(symcrust_hash_HashState *x0, uint8_t *x1, size_t x2);

extern void symcrust_hash_SymCryptShake256Default(uint8_t *x0, size_t x1, uint8_t *x2);

extern void
symcrust_hash_SymCryptShake256Extract(
  symcrust_hash_HashState *x0,
  uint8_t *x1,
  size_t x2,
  bool x3
);

extern void symcrust_hash_SymCryptShake256Init(symcrust_hash_HashState *x0);

extern void symcrust_hash_SymCryptShake256Result(symcrust_hash_HashState *x0, uint8_t *x1);

extern void
symcrust_hash_SymCryptShake256StateCopy(
  symcrust_hash_HashState *x0,
  symcrust_hash_HashState *x1
);

#define SYMCRUST_HASH_UNINITIALIZED_HASH_STATE ((KRML_CLITERAL(symcrust_hash_HashState){ .ks = { .state = { 0ULL, 1ULL, 2ULL, 3ULL, 4ULL, 5ULL, 6ULL, 7ULL, 8ULL, 9ULL, 10ULL, 11ULL, 12ULL, 13ULL, 14ULL, 15ULL, 16ULL, 17ULL, 18ULL, 19ULL, 20ULL, 21ULL, 22ULL, 23ULL, 24ULL }, .input_block_size = 25U, .state_index = 26U, .padding_value = 27U, .squeeze_mode = false }, .magic = (size_t)28U }))

void symcrust_hash_sha3_256(Eurydice_slice pb_data, uint8_t *pb_result);

void symcrust_hash_sha3_256_append(symcrust_hash_HashState *p_state, Eurydice_slice pb_data);

void symcrust_hash_sha3_256_init(symcrust_hash_HashState *p_state);

void symcrust_hash_sha3_256_result(symcrust_hash_HashState *p_state, uint8_t *pb_result);

void
symcrust_hash_sha3_256_state_copy(
  symcrust_hash_HashState *p_src,
  symcrust_hash_HashState *p_dst
);

void symcrust_hash_sha3_512(Eurydice_slice pb_data, uint8_t *pb_result);

void symcrust_hash_sha3_512_append(symcrust_hash_HashState *p_state, Eurydice_slice pb_data);

void symcrust_hash_sha3_512_init(symcrust_hash_HashState *p_state);

void symcrust_hash_sha3_512_result(symcrust_hash_HashState *p_state, uint8_t *pb_result);

void
symcrust_hash_sha3_512_state_copy(
  symcrust_hash_HashState *p_src,
  symcrust_hash_HashState *p_dst
);

void symcrust_hash_shake128(Eurydice_slice pb_data, Eurydice_slice pb_result);

void symcrust_hash_shake128_append(symcrust_hash_HashState *p_state, Eurydice_slice pb_data);

void symcrust_hash_shake128_default(Eurydice_slice data, uint8_t *dst);

void
symcrust_hash_shake128_extract(symcrust_hash_HashState *st, Eurydice_slice dst, bool wipe);

void symcrust_hash_shake128_init(symcrust_hash_HashState *p_state);

void symcrust_hash_shake128_result(symcrust_hash_HashState *p_state, uint8_t *pb_result);

void
symcrust_hash_shake128_state_copy(
  symcrust_hash_HashState *p_src,
  symcrust_hash_HashState *p_dst
);

void symcrust_hash_shake256(Eurydice_slice pb_data, Eurydice_slice pb_result);

void symcrust_hash_shake256_append(symcrust_hash_HashState *p_state, Eurydice_slice pb_data);

void symcrust_hash_shake256_default(Eurydice_slice data, uint8_t *dst);

void
symcrust_hash_shake256_extract(symcrust_hash_HashState *st, Eurydice_slice dst, bool wipe);

void symcrust_hash_shake256_init(symcrust_hash_HashState *p_state);

void symcrust_hash_shake256_result(symcrust_hash_HashState *p_state, uint8_t *pb_result);

void
symcrust_hash_shake256_state_copy(
  symcrust_hash_HashState *p_src,
  symcrust_hash_HashState *p_dst
);

#define symcrust_key_Format_PrivateSeed 1
#define symcrust_key_Format_DecapsulationKey 2
#define symcrust_key_Format_EncapsulationKey 3

typedef uint8_t symcrust_key_Format;

#define symcrust_key_Params_MlKem512 1
#define symcrust_key_Params_MlKem768 2
#define symcrust_key_Params_MlKem1024 3

typedef uint8_t symcrust_key_Params;

typedef struct symcrust_key_InternalParams_s
{
  symcrust_key_Params params;
  uint8_t n_rows;
  uint8_t n_eta1;
  uint8_t n_eta2;
  uint8_t n_bits_of_u;
  uint8_t n_bits_of_v;
}
symcrust_key_InternalParams;

#define SYMCRUST_KEY_INTERNAL_PARAMS_ML_KEM1024 ((KRML_CLITERAL(symcrust_key_InternalParams){ .params = symcrust_key_Params_MlKem1024, .n_rows = 4U, .n_eta1 = 2U, .n_eta2 = 2U, .n_bits_of_u = 11U, .n_bits_of_v = 5U }))

#define SYMCRUST_KEY_INTERNAL_PARAMS_ML_KEM512 ((KRML_CLITERAL(symcrust_key_InternalParams){ .params = symcrust_key_Params_MlKem512, .n_rows = 2U, .n_eta1 = 3U, .n_eta2 = 2U, .n_bits_of_u = 10U, .n_bits_of_v = 4U }))

#define SYMCRUST_KEY_INTERNAL_PARAMS_ML_KEM768 ((KRML_CLITERAL(symcrust_key_InternalParams){ .params = symcrust_key_Params_MlKem768, .n_rows = 3U, .n_eta1 = 2U, .n_eta2 = 2U, .n_bits_of_u = 10U, .n_bits_of_v = 4U }))

#define SYMCRUST_KEY_KEY_MAX_SIZEOF_ENCODED_T ((size_t)1536U)

typedef struct symcrust_key_Key_s
{
  uint32_t algorithm_info;
  symcrust_key_InternalParams params;
  bool has_private_seed;
  bool has_private_key;
  uint8_t private_seed[32U];
  uint8_t private_random[32U];
  uint8_t public_seed[32U];
  uint8_t encoded_t[1536U];
  uint8_t encaps_key_hash[32U];
  size_t n_rows;
  Eurydice_derefed_slice data;
}
symcrust_key_Key;

typedef symcrust_key_Key symcrust_key_Key2;

#define SYMCRUST_KEY_MLWE_POLYNOMIAL_COEFFICIENTS ((size_t)256U)

typedef Eurydice_derefed_slice symcrust_key_Matrix2;

extern const uint16_t symcrust_key_POLYELEMENT_ZERO[256U];

typedef uint16_t symcrust_key_PolyElement[256U];

typedef Eurydice_derefed_slice symcrust_key_Vector;

symcrust_key_InternalParams
symcrust_key_get_internal_params_from_params(symcrust_key_Params params);

#define SYMCRUST_KEY_KEY_ALLOCATE2_PARAMS (symcrust_key_get_internal_params_from_params(symcrust_key_Params_MlKem512))

#define SYMCRUST_KEY_KEY_ALLOCATE2_N_ROWS ((size_t)SYMCRUST_KEY_KEY_ALLOCATE2_PARAMS.n_rows)

/**
A monomorphic instance of Eurydice.dst
with types symcrust_key_PreKey2 Eurydice_derefed_slice uint16_t[256size_t]

*/
typedef struct Eurydice_dst_8c_s
{
  symcrust_key_Key *ptr;
  size_t len;
}
Eurydice_dst_8c;

/**
A monomorphic instance of core.result.Result
with types Eurydice_dst symcrust_key_PreKey2 Eurydice_derefed_slice uint16_t[256size_t], symcrust_common_Error

*/
typedef struct core_result_Result_67_s
{
  core_result_Result_10 tag;
  union {
    Eurydice_dst_8c case_Ok;
    symcrust_common_Error case_Err;
  }
  val;
}
core_result_Result_67;

/**
A monomorphic instance of symcrust.key.PreKey2
with types uint16_t[256size_t][15size_t]

*/
typedef struct symcrust_key_PreKey2_7d_s
{
  uint32_t algorithm_info;
  symcrust_key_InternalParams params;
  bool has_private_seed;
  bool has_private_key;
  uint8_t private_seed[32U];
  uint8_t private_random[32U];
  uint8_t public_seed[32U];
  uint8_t encoded_t[1536U];
  uint8_t encaps_key_hash[32U];
  size_t n_rows;
  uint16_t data[15U][256U];
}
symcrust_key_PreKey2_7d;

/**
A monomorphic instance of symcrust.key.PreKey2
with types uint16_t[256size_t][24size_t]

*/
typedef struct symcrust_key_PreKey2_76_s
{
  uint32_t algorithm_info;
  symcrust_key_InternalParams params;
  bool has_private_seed;
  bool has_private_key;
  uint8_t private_seed[32U];
  uint8_t private_random[32U];
  uint8_t public_seed[32U];
  uint8_t encoded_t[1536U];
  uint8_t encaps_key_hash[32U];
  size_t n_rows;
  uint16_t data[24U][256U];
}
symcrust_key_PreKey2_76;

/**
A monomorphic instance of symcrust.key.PreKey2
with types uint16_t[256size_t][8size_t]

*/
typedef struct symcrust_key_PreKey2_51_s
{
  uint32_t algorithm_info;
  symcrust_key_InternalParams params;
  bool has_private_seed;
  bool has_private_key;
  uint8_t private_seed[32U];
  uint8_t private_random[32U];
  uint8_t public_seed[32U];
  uint8_t encoded_t[1536U];
  uint8_t encaps_key_hash[32U];
  size_t n_rows;
  uint16_t data[8U][256U];
}
symcrust_key_PreKey2_51;

core_result_Result_67 symcrust_key_key_allocate2(symcrust_key_Params params);

core_result_Result_67 symcrust_key_key_allocate(symcrust_key_Params params);

/**
This function found in impl {(core::cmp::PartialEq<symcrust::key::Params> for symcrust::key::Params)#2}
*/
bool symcrust_key_eq_f1(symcrust_key_Params *self, symcrust_key_Params *other);

extern bool
symcrust_key___core__cmp__PartialEq_symcrust__key__Params__for_symcrust__key__Params__2__ne(
  symcrust_key_Params *x0,
  symcrust_key_Params *x1
);

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
size_t symcrust_key_matrix_len_fd(Eurydice_dst_8c self);

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
Eurydice_slice symcrust_key_atranspose_fd(Eurydice_dst_8c self);

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
Eurydice_slice symcrust_key_atranspose_mut_fd(Eurydice_dst_8c self);

typedef struct Eurydice_slice_uint16_t_256size_t__x3_s
{
  Eurydice_slice fst;
  Eurydice_slice snd;
  Eurydice_slice thd;
}
Eurydice_slice_uint16_t_256size_t__x3;

typedef struct Eurydice_slice_uint16_t_256size_t__x2_s
{
  Eurydice_slice fst;
  Eurydice_slice snd;
}
Eurydice_slice_uint16_t_256size_t__x2;

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
Eurydice_slice_uint16_t_256size_t__x3 symcrust_key_ats_mut_fd(Eurydice_dst_8c self);

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
Eurydice_slice symcrust_key_s_fd(Eurydice_dst_8c self);

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
Eurydice_slice symcrust_key_s_mut_fd(Eurydice_dst_8c self);

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
Eurydice_slice symcrust_key_t_fd(Eurydice_dst_8c self);

/**
A monomorphic instance of K.
with types Eurydice_slice uint16_t[256size_t],  uint8_t*

*/
typedef struct tuple_48_s
{
  Eurydice_slice fst;
  uint8_t *snd;
}
tuple_48;

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
tuple_48 symcrust_key_t_encoded_t_mut_fd(Eurydice_dst_8c self);

/**
This function found in impl {symcrust::key::PreKey2<@Slice<@Array<u16, 256: usize>>>}
*/
Eurydice_slice symcrust_key_t_mut_fd(Eurydice_dst_8c self);

#define SYMCRUST_MLKEM_CIPHERTEXT_SIZE_MLKEM1024 ((size_t)1568U)

#define SYMCRUST_MLKEM_CIPHERTEXT_SIZE_MLKEM512 ((size_t)768U)

#define SYMCRUST_MLKEM_CIPHERTEXT_SIZE_MLKEM768 ((size_t)1088U)

#define SYMCRUST_MLKEM_FLAG_KEY_MINIMAL_VALIDATION (512U)

#define SYMCRUST_MLKEM_FLAG_KEY_NO_FIPS (256U)

#define SYMCRUST_MLKEM_SIZEOF_AGREED_SECRET ((size_t)32U)

#define SYMCRUST_MLKEM_SIZEOF_ENCAPS_RANDOM ((size_t)32U)

#define SYMCRUST_MLKEM_SIZEOF_FORMAT_PRIVATE_SEED ((size_t)2U * (size_t)32U)

#define SYMCRUST_MLKEM_SIZEOF_MAX_CIPHERTEXT ((size_t)1568U)

typedef struct symcrust_ntt_InternalComputationTemporaries_s
{
  uint16_t ab_vector_buffer0[4U][256U];
  uint16_t ab_vector_buffer1[4U][256U];
  uint16_t ab_poly_element_buffer0[256U];
  uint16_t ab_poly_element_buffer1[256U];
  uint32_t ab_poly_element_accumulator_buffer[256U];
  symcrust_hash_HashState hash_state0;
  symcrust_hash_HashState hash_state1;
}
symcrust_ntt_InternalComputationTemporaries;

#define SYMCRUST_NTT_MATRIX_MAX_NROWS ((size_t)4U)

#define symcrust_ntt_slice_to_sub_array(x_0, x_1, x_2, x_3, _ret_t) symcrust_ntt_slice_to_sub_array_(x_0, x_1, x_2, x_3)

extern void
symcrust_ntt_slice_to_sub_array_(size_t x0, Eurydice_slice x1, size_t x2, uint8_t *x3);

uint32_t symcrust_ntt_min(uint32_t x, uint32_t y);

#define SYMCRUST_NTT_Q (3329U)

uint32_t symcrust_ntt_mod_reduce(uint32_t a);

symcrust_common_Error
symcrust_ntt_poly_element_decode_and_decompress(
  Eurydice_slice pb_src,
  uint32_t n_bits_per_coefficient,
  uint16_t *pe_dst
);

symcrust_common_Error
symcrust_ntt_vector_decode_and_decompress(
  Eurydice_slice pb_src,
  uint32_t n_bits_per_coefficient,
  Eurydice_slice pv_dst
);

extern const uint16_t symcrust_ntt_ZETA_BIT_REV_TIMES_R[128U];

extern const uint16_t symcrust_ntt_ZETA_BIT_REV_TIMES_R_TIMES_NEG_Q_INV_MOD_R[128U];

#define SYMCRUST_NTT_RMASK (65535U)

#define SYMCRUST_NTT_NEG_Q_INV_MOD_R (3327U)

#define SYMCRUST_NTT_RLOG2 (16U)

uint32_t symcrust_ntt_mont_mul(uint32_t a, uint32_t b, uint32_t b_mont);

uint32_t symcrust_ntt_mod_sub(uint32_t a, uint32_t b);

uint32_t symcrust_ntt_mod_add(uint32_t a, uint32_t b);

void symcrust_ntt_poly_element_ntt_layer_c(uint16_t *pe_src, size_t k, size_t len);

void symcrust_ntt_poly_element_ntt_layer(uint16_t *pe_src, size_t k, size_t len);

void symcrust_ntt_poly_element_ntt(uint16_t *pe_src);

void symcrust_ntt_vector_ntt(Eurydice_slice pv_src);

extern const uint16_t symcrust_ntt_ZETA_TO_TIMES_BIT_REV_PLUS_1_TIMES_R[128U];

void
symcrust_ntt_poly_element_mul_and_accumulate(
  uint16_t *pe_src1,
  uint16_t *pe_src2,
  uint32_t *pa_dst
);

void
symcrust_ntt_montgomery_reduce_and_add_poly_element_accumulator_to_poly_element(
  uint32_t *pa_src,
  uint16_t *pe_dst
);

/**
A monomorphic instance of symcrust.common.wipe_slice
with types uint32_t

*/
void symcrust_common_wipe_slice_df(Eurydice_slice pb_dst);

/**
A monomorphic instance of symcrust.common.wipe_slice
with types uint16_t

*/
void symcrust_common_wipe_slice_de(Eurydice_slice pb_dst);

void
symcrust_ntt_vector_mont_dot_product(
  Eurydice_slice pv_src1,
  Eurydice_slice pv_src2,
  uint16_t *pe_dst,
  uint32_t *pa_tmp
);

void symcrust_ntt_poly_element_intt_layer_c(uint16_t *pe_src, size_t k, size_t len);

void symcrust_ntt_poly_element_intt_layer(uint16_t *pe_src, size_t k, size_t len);

#define SYMCRUST_NTT_INTT_FIXUP_TIMES_RSQR (1441U)

#define SYMCRUST_NTT_INTT_FIXUP_TIMES_RSQR_TIMES_NEQ_Q_INV_MOD_R (10079U)

void symcrust_ntt_poly_element_intt_and_mul_r(uint16_t *pe_src);

void symcrust_ntt_poly_element_sub(uint16_t *pe_src1, uint16_t *pe_src2, uint16_t *pe_dst);

#define SYMCRUST_NTT_COMPRESS_MULCONSTANT (10321339U)

#define SYMCRUST_NTT_COMPRESS_SHIFTCONSTANT (35U)

void
symcrust_ntt_poly_element_compress_and_encode(
  uint16_t *pe_src,
  uint32_t n_bits_per_coefficient,
  Eurydice_slice pb_dst
);

void
symcrust_ntt_poly_element_sample_cbd_from_bytes(
  Eurydice_slice pb_src,
  uint32_t eta,
  uint16_t *pe_dst
);

void symcrust_ntt_vector_set_zero(Eurydice_slice pv_src);

void
symcrust_ntt_poly_element_mul_and_accumulate_aux(
  Eurydice_slice pm_src1,
  size_t n_rows,
  size_t i,
  size_t j,
  uint16_t *pe_src2,
  uint32_t *pa_tmp
);

void
symcrust_ntt_matrix_vector_mont_mul_and_add(
  Eurydice_slice pm_src1,
  Eurydice_slice pv_src2,
  Eurydice_slice pv_dst,
  uint32_t *pa_tmp,
  uint8_t n_rows
);

void symcrust_ntt_vector_intt_and_mul_r(Eurydice_slice pv_src);

void symcrust_ntt_poly_element_add(uint16_t *pe_src1, uint16_t *pe_src2, uint16_t *pe_dst);

void
symcrust_ntt_vector_compress_and_encode(
  Eurydice_slice pv_src,
  uint32_t n_bits_per_coefficient,
  Eurydice_slice pb_dst
);

/**
A monomorphic instance of core.result.Result
with types  uint8_t*, core_array_TryFromSliceError

*/
typedef struct core_result_Result_a0_s
{
  core_result_Result_10 tag;
  union {
    uint8_t *case_Ok;
    core_array_TryFromSliceError case_Err;
  }
  val;
}
core_result_Result_a0;

symcrust_common_Error
symcrust_mlkem_encapsulate_internal(
  Eurydice_dst_8c pk_mlkem_key,
  Eurydice_slice pb_agreed_secret,
  Eurydice_slice pb_ciphertext,
  uint8_t *pb_random,
  symcrust_ntt_InternalComputationTemporaries *p_comp_temps
);

/**
A monomorphic instance of core.result.Result
with types  symcrust_ntt_InternalComputationTemporaries*, ()

*/
typedef struct core_result_Result_80_s
{
  core_result_Result_10 tag;
  symcrust_ntt_InternalComputationTemporaries *f0;
}
core_result_Result_80;

/**
A monomorphic instance of core.result.Result
with types alloc_vec_Vec uint8_t (), alloc_collections_TryReserveError

*/
typedef struct core_result_Result_4c_s
{
  core_result_Result_10 tag;
  union {
    alloc_vec_Vec case_Ok;
    alloc_collections_TryReserveError case_Err;
  }
  val;
}
core_result_Result_4c;

typedef struct Eurydice_slice_uint8_t_x2_s
{
  Eurydice_slice fst;
  Eurydice_slice snd;
}
Eurydice_slice_uint8_t_x2;

symcrust_common_Error
symcrust_mlkem_decapsulate(
  Eurydice_dst_8c pk_mlkem_key,
  Eurydice_slice pb_ciphertext,
  Eurydice_slice pb_agreed_secret
);

symcrust_common_Error
symcrust_mlkem_encapsulate_ex(
  Eurydice_dst_8c pk_mlkem_key,
  Eurydice_slice pb_random,
  Eurydice_slice pb_agreed_secret,
  Eurydice_slice pb_ciphertext
);

symcrust_common_Error
symcrust_mlkem_encapsulate(
  Eurydice_dst_8c pk_mlkem_key,
  Eurydice_slice pb_agreed_secret,
  Eurydice_slice pb_ciphertext
);

size_t symcrust_mlkem_sizeof_encoded_uncompressed_vector(size_t _n_rows);

void
symcrust_mlkem_key_compute_encapsulation_key_hash(
  Eurydice_dst_8c pk_mlkem_key,
  symcrust_ntt_InternalComputationTemporaries *p_comp_temps
);

void
symcrust_ntt_poly_element_sample_ntt_from_shake128(
  symcrust_hash_HashState *p_state,
  uint16_t *pe_dst
);

void
symcrust_mlkem_key_expand_public_matrix_from_public_seed(
  Eurydice_dst_8c pk_mlkem_key,
  symcrust_ntt_InternalComputationTemporaries *p_comp_temps
);

#define SYMCRUST_NTT_RSQR (1353U)

#define SYMCRUST_NTT_RSQR_TIMES_NEG_Q_INV_MOD_R (44983U)

void symcrust_ntt_poly_element_mul_r(uint16_t *pe_src, uint16_t *pe_dst);

void symcrust_ntt_vector_mul_r(Eurydice_slice pv_src, Eurydice_slice pv_dst);

void symcrust_ntt_matrix_transpose(Eurydice_slice pm_src, uint8_t n_rows);

/**
A monomorphic instance of symcrust.common.wipe_slice
with types uint8_t

*/
void symcrust_common_wipe_slice_90(Eurydice_slice pb_dst);

void
symcrust_mlkem_key_expand_from_private_seed(
  Eurydice_dst_8c pk_mlkem_key,
  symcrust_ntt_InternalComputationTemporaries *p_comp_temps
);

size_t symcrust_mlkem_sizeof_format_decapsulation_key(size_t _n_rows);

size_t symcrust_mlkem_sizeof_format_encapsulation_key(size_t _n_rows);

symcrust_common_Error
symcrust_mlkem_key_set_value(
  Eurydice_slice pb_src,
  symcrust_key_Format format,
  uint32_t flags,
  Eurydice_dst_8c pk_mlkem_key
);

symcrust_common_Error
symcrust_mlkem_key_generate(Eurydice_dst_8c pk_mlkem_key, uint32_t flags);

symcrust_common_Error
symcrust_mlkem_key_get_value(
  Eurydice_dst_8c pk_mlkem_key,
  Eurydice_slice pb_dst,
  symcrust_key_Format format,
  uint32_t _flags
);

size_t symcrust_mlkem_sizeof_ciphertext_from_params(symcrust_key_Params params);

size_t
symcrust_mlkem_sizeof_key_format_from_params(
  symcrust_key_Params params,
  symcrust_key_Format format
);

typedef uint32_t symcrust_ntt_PolyElementAccumulator[256U];

#define SYMCRUST_NTT_SIZEOF_AGREED_SECRET ((size_t)32U)

#define SYMCRUST_NTT_SIZEOF_ENCAPS_RANDOM ((size_t)32U)

#define SYMCRUST_NTT_SIZEOF_MAX_CIPHERTEXT ((size_t)1568U)

void
symcrust_ntt_vector_add(Eurydice_slice pv_src1, Eurydice_slice pv_src2, Eurydice_slice pv_dst);

void
symcrust_ntt_vector_sub(Eurydice_slice pv_src1, Eurydice_slice pv_src2, Eurydice_slice pv_dst);

#if defined(__cplusplus)
}
#endif

#define __symcrust_H_DEFINED
#endif
