/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/jonathan/Code/eurydice/eurydice symcrust.llbc --output c/ -fcomments --config c.yaml
  F* version: <unknown>
  KaRaMeL version: 67529ac3
 */

#ifndef __symcrust_ffi_H
#define __symcrust_ffi_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

#include "symcrust_mlkem.h"
#include "symcrust_common.h"

typedef int32_t symcrust_ffi_CFormat;

typedef Eurydice_dst_8c *symcrust_ffi_CKey;

typedef int32_t symcrust_ffi_CParams;

void symcrust_ffi_SctestModuleInit(void);

void symcrust_ffi_SctestWipe(uint8_t *pb_data, size_t cb_data);

symcrust_common_Error
symcrust_ffi_SymCryptMlKemDecapsulate(
  Eurydice_dst_8c *k,
  uint8_t *pb_ciphertext,
  size_t cb_ciphertext,
  uint8_t *pb_agreed_secret,
  size_t cb_agreed_secret
);

symcrust_common_Error
symcrust_ffi_SymCryptMlKemEncapsulate(
  Eurydice_dst_8c *k,
  uint8_t *pb_agreed_secret,
  size_t cb_agreed_secret,
  uint8_t *pb_ciphertext,
  size_t cb_ciphertext
);

symcrust_common_Error
symcrust_ffi_SymCryptMlKemEncapsulateEx(
  Eurydice_dst_8c *k,
  uint8_t *pb_random,
  size_t cb_random,
  uint8_t *pb_agreed_secret,
  size_t cb_agreed_secret,
  uint8_t *pb_ciphertext,
  size_t cb_ciphertext
);

void symcrust_ffi_SymCryptMlKemSelftest(void);

/**
A monomorphic instance of core.result.Result
with types symcrust_key_Params, symcrust_common_Error

*/
typedef struct core_result_Result_fa_s
{
  core_result_Result_10 tag;
  union {
    symcrust_key_Params case_Ok;
    symcrust_common_Error case_Err;
  }
  val;
}
core_result_Result_fa;

/**
This function found in impl {core::convert::TryFrom<i32, symcrust::common::Error> for symcrust::key::Params}
*/
core_result_Result_fa symcrust_ffi_try_from_1e(int32_t params);

symcrust_common_Error
symcrust_ffi_SymCryptMlKemSizeofCiphertextFromParams(int32_t params, size_t *sz);

/**
A monomorphic instance of core.result.Result
with types symcrust_key_Format, symcrust_common_Error

*/
typedef struct core_result_Result_e8_s
{
  core_result_Result_10 tag;
  union {
    symcrust_key_Format case_Ok;
    symcrust_common_Error case_Err;
  }
  val;
}
core_result_Result_e8;

/**
This function found in impl {core::convert::TryFrom<i32, symcrust::common::Error> for symcrust::key::Format}
*/
core_result_Result_e8 symcrust_ffi_try_from_2a(int32_t format);

symcrust_common_Error
symcrust_ffi_SymCryptMlKemSizeofKeyFormatFromParams(int32_t params, int32_t format, size_t *sz);

Eurydice_dst_8c *symcrust_ffi_SymCryptMlKemkeyAllocate(int32_t params);

void symcrust_ffi_SymCryptMlKemkeyFree(Eurydice_dst_8c *k);

symcrust_common_Error
symcrust_ffi_SymCryptMlKemkeyGenerate(Eurydice_dst_8c *k, uint32_t flags);

symcrust_common_Error
symcrust_ffi_SymCryptMlKemkeyGetValue(
  Eurydice_dst_8c *k,
  uint8_t *pb_dst,
  size_t cb_dst,
  int32_t format,
  uint32_t flags
);

symcrust_common_Error
symcrust_ffi_SymCryptMlKemkeySetValue(
  uint8_t *pb_src,
  size_t cb_src,
  int32_t format,
  uint32_t flags,
  Eurydice_dst_8c *k
);

#if defined(__cplusplus)
}
#endif

#define __symcrust_ffi_H_DEFINED
#endif
